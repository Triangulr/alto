import { app, BrowserWindow, ipcMain, screen, desktopCapturer, shell } from 'electron';
import { autoUpdater } from 'electron-updater';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
const isDev = process.env.NODE_ENV === 'development';

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

// Add the new auto-updater configuration
const { updateElectronApp } = require('update-electron-app');
updateElectronApp();


let mainWindow: BrowserWindow | null = null;

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
    transparent: true,
    frame: false,
    backgroundColor: '#00000000', // Fully transparent
    hasShadow: false
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Enable transparency for the whole window
  mainWindow.setBackgroundColor('#00000000');

  // Add Content Security Policy to allow connections to the API
  const csp = [
    "default-src 'self' 'unsafe-inline' data:;",
    "connect-src 'self' https://alto-prod.axesys.xyz https://*.picovoice.ai https://*.picovoice.net;",
    "img-src 'self' data: https://storage.googleapis.com;",
    "script-src 'self' 'unsafe-eval' blob:;",
    "worker-src 'self' blob:;",
    "media-src 'self' blob: https://storage.googleapis.com;"
  ];

  mainWindow.webContents.session.webRequest.onHeadersReceived((details, callback) => {
    callback({
      responseHeaders: {
        ...details.responseHeaders,
        'Content-Security-Policy': [csp.join(' ')]
      }
    });
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  createWindow();
  autoUpdater.checkForUpdatesAndNotify();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

ipcMain.handle('CAPTURE_SCREEN', async () => {
  const sources = await desktopCapturer.getSources({ types: ['screen'] });
  return sources;
});

ipcMain.handle('RESIZE_AND_POSITION_WINDOW', () => {
  if (mainWindow) {
    const { width, height } = screen.getPrimaryDisplay().workAreaSize;
    const windowWidth = 500;
    const windowHeight = 400;
    mainWindow.setSize(windowWidth, windowHeight);
    mainWindow.setPosition(width - windowWidth, height - windowHeight);
    mainWindow.setAlwaysOnTop(true, 'screen-saver');
    mainWindow.setVisibleOnAllWorkspaces(true);
  }
});

ipcMain.on('CLOSE_APP', () => {
  app.quit();
});

ipcMain.handle('OPEN_EXTERNAL', (event, url) => {
  shell.openExternal(url);
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.